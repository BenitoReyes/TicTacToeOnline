{"ast":null,"code":"import i18n from 'i18next';\nimport Dayjs from 'dayjs';\nimport calendar from 'dayjs/plugin/calendar';\nimport updateLocale from 'dayjs/plugin/updateLocale';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat';\nimport localeData from 'dayjs/plugin/localeData';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\nimport { defaultTranslatorFunction, predefinedFormatters } from './utils';\nimport { deTranslations, enTranslations, esTranslations, frTranslations, hiTranslations, itTranslations, jaTranslations, koTranslations, nlTranslations, ptTranslations, ruTranslations, trTranslations } from './translations';\nimport 'dayjs/locale/de';\nimport 'dayjs/locale/es';\nimport 'dayjs/locale/fr';\nimport 'dayjs/locale/hi';\nimport 'dayjs/locale/it';\nimport 'dayjs/locale/ja';\nimport 'dayjs/locale/ko';\nimport 'dayjs/locale/nl';\nimport 'dayjs/locale/pt';\nimport 'dayjs/locale/ru';\nimport 'dayjs/locale/tr';\n// These locale imports also set these locale globally.\n// So As a last step I am going to import english locale\n// to make sure I don't mess up language at other places in app.\nimport 'dayjs/locale/en';\nconst defaultNS = 'translation';\nconst defaultLng = 'en';\nDayjs.extend(updateLocale);\nDayjs.extend(utc);\nDayjs.extend(timezone);\nDayjs.updateLocale('de', {\n  calendar: {\n    lastDay: '[gestern um] LT',\n    lastWeek: '[letzten] dddd [um] LT',\n    nextDay: '[morgen um] LT',\n    nextWeek: 'dddd [um] LT',\n    sameDay: '[heute um] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('es', {\n  calendar: {\n    lastDay: '[ayer a las] LT',\n    lastWeek: '[pasado] dddd [a] LT',\n    nextDay: '[mañana a] LT',\n    nextWeek: 'dddd [a] LT',\n    sameDay: '[hoy a las] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('fr', {\n  calendar: {\n    lastDay: '[Hier à] LT',\n    lastWeek: 'dddd [dernier à] LT',\n    nextDay: '[Demain à] LT',\n    nextWeek: 'dddd [à] LT',\n    sameDay: '[Aujourd’hui à] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('hi', {\n  calendar: {\n    lastDay: '[कल] LT',\n    lastWeek: '[पिछले] dddd, LT',\n    nextDay: '[कल] LT',\n    nextWeek: 'dddd, LT',\n    sameDay: '[आज] LT',\n    sameElse: 'L'\n  },\n  // Hindi notation for meridiems are quite fuzzy in practice. While there exists\n  // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.\n  meridiem(hour) {\n    if (hour < 4) {\n      return 'रात';\n    } else if (hour < 10) {\n      return 'सुबह';\n    } else if (hour < 17) {\n      return 'दोपहर';\n    } else if (hour < 20) {\n      return 'शाम';\n    } else {\n      return 'रात';\n    }\n  },\n  meridiemHour(hour, meridiem) {\n    if (hour === 12) {\n      hour = 0;\n    }\n    if (meridiem === 'रात') {\n      return hour < 4 ? hour : hour + 12;\n    } else if (meridiem === 'सुबह') {\n      return hour;\n    } else if (meridiem === 'दोपहर') {\n      return hour >= 10 ? hour : hour + 12;\n    } else if (meridiem === 'शाम') {\n      return hour + 12;\n    }\n    return hour;\n  },\n  meridiemParse: /रात|सुबह|दोपहर|शाम/\n});\nDayjs.updateLocale('it', {\n  calendar: {\n    lastDay: '[Ieri alle] LT',\n    lastWeek: '[lo scorso] dddd [alle] LT',\n    nextDay: '[Domani alle] LT',\n    nextWeek: 'dddd [alle] LT',\n    sameDay: '[Oggi alle] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('ja', {\n  calendar: {\n    lastDay: '[昨日] LT',\n    lastWeek: 'dddd LT',\n    nextDay: '[明日] LT',\n    nextWeek: '[次の] dddd LT',\n    sameDay: '[今日] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('ko', {\n  calendar: {\n    lastDay: '[어제] LT',\n    lastWeek: '[지난] dddd LT',\n    nextDay: '[내일] LT',\n    nextWeek: 'dddd LT',\n    sameDay: '[오늘] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('nl', {\n  calendar: {\n    lastDay: '[gisteren om] LT',\n    lastWeek: '[afgelopen] dddd [om] LT',\n    nextDay: '[morgen om] LT',\n    nextWeek: 'dddd [om] LT',\n    sameDay: '[vandaag om] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('pt', {\n  calendar: {\n    lastDay: '[ontem às] LT',\n    lastWeek: 'dddd [passada às] LT',\n    nextDay: '[amanhã às] LT',\n    nextWeek: 'dddd [às] LT',\n    sameDay: '[hoje às] LT',\n    sameElse: 'L'\n  }\n});\nDayjs.updateLocale('ru', {\n  calendar: {\n    lastDay: '[Вчера, в] LT',\n    nextDay: '[Завтра, в] LT',\n    sameDay: '[Сегодня, в] LT'\n  }\n});\nDayjs.updateLocale('tr', {\n  calendar: {\n    lastDay: '[dün] LT',\n    lastWeek: '[geçen] dddd [saat] LT',\n    nextDay: '[yarın saat] LT',\n    nextWeek: '[gelecek] dddd [saat] LT',\n    sameDay: '[bugün saat] LT',\n    sameElse: 'L'\n  }\n});\nconst en_locale = {\n  formats: {},\n  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  relativeTime: {},\n  weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\n// Type guards to check DayJs\nconst isDayJs = dateTimeParser => dateTimeParser.extend !== undefined;\nconst supportsTz = dateTimeParser => dateTimeParser.tz !== undefined;\n/**\n * Wrapper around [i18next](https://www.i18next.com/) class for Stream related translations.\n * Instance of this class should be provided to Chat component to handle translations.\n * Stream provides following list of in-built translations:\n * 1. English (en)\n * 2. Dutch (nl)\n * 3. Russian (ru)\n * 4. Turkish (tr)\n * 5. French (fr)\n * 6. Italian (it)\n * 7. Hindi (hi)\n * 8. Spanish (es)\n * 9. Portuguese (pt)\n * 10. German (de)\n * 11. Japanese (ja)\n * 12. Korean (ko)\n *\n * Simplest way to start using chat components in one of the in-built languages would be following:\n *\n * ```\n * const i18n = new Streami18n({ language 'nl' });\n * <Chat client={chatClient} i18nInstance={i18n}>\n *  ...\n * </Chat>\n * ```\n *\n * If you would like to override certain keys in in-built translation.\n * UI will be automatically updated in this case.\n *\n * ```\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  translationsForLanguage: {\n *    'Nothing yet...': 'Nog Niet ...',\n *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n *  }\n * });\n *\n * If you would like to register additional languages, use registerTranslation. You can add as many languages as you want:\n *\n * i18n.registerTranslation('zh', {\n *  'Nothing yet...': 'Nog Niet ...',\n *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n * });\n *\n * <Chat client={chatClient} i18nInstance={i18n}>\n *  ...\n * </Chat>\n * ```\n *\n * You can use the same function to add whole new language as well.\n *\n * ```\n * const i18n = new Streami18n();\n *\n * i18n.registerTranslation('mr', {\n *  'Nothing yet...': 'काहीही नाही  ...',\n *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n * });\n *\n * // Make sure to call setLanguage to reflect new language in UI.\n * i18n.setLanguage('it');\n * <Chat client={chatClient} i18nInstance={i18n}>\n *  ...\n * </Chat>\n * ```\n *\n * ## Datetime translations\n *\n * Stream react chat components uses [dayjs](https://day.js.org/en/) internally by default to format datetime stamp.\n * e.g., in ChannelPreview, MessageContent components.\n * Dayjs has locale support as well - https://day.js.org/docs/en/i18n/i18n\n * Dayjs is a lightweight alternative to Momentjs with the same modern API.\n *\n * Dayjs provides locale config for plenty of languages, you can check the whole list of locale configs at following url\n * https://github.com/iamkun/dayjs/tree/dev/src/locale\n *\n * You can either provide the dayjs locale config while registering\n * language with Streami18n (either via constructor or registerTranslation()) or you can provide your own Dayjs or Moment instance\n * to Streami18n constructor, which will be then used internally (using the language locale) in components.\n *\n * 1. Via language registration\n *\n * e.g.,\n * ```\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  dayjsLocaleConfigForLanguage: {\n *    months: [...],\n *    monthsShort: [...],\n *    calendar: {\n *      sameDay: ...'\n *    }\n *  }\n * });\n * ```\n *\n * Similarly, you can add locale config for moment while registering translation via `registerTranslation` function.\n *\n * e.g.,\n * ```\n * const i18n = new Streami18n();\n *\n * i18n.registerTranslation(\n *  'mr',\n *  {\n *    'Nothing yet...': 'काहीही नाही  ...',\n *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n *  },\n *  {\n *    months: [...],\n *    monthsShort: [...],\n *    calendar: {\n *      sameDay: ...'\n *    }\n *  }\n * );\n *```\n * 2. Provide your own Moment object\n *\n * ```js\n * import 'moment/locale/nl';\n * import 'moment/locale/it';\n * // or if you want to include all locales\n * import 'moment/min/locales';\n *\n * import Moment from moment\n *\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  DateTimeParser: Moment\n * })\n * ```\n *\n * 3. Provide your own Dayjs object\n *\n * ```js\n * import Dayjs from 'dayjs'\n *\n * import 'dayjs/locale/nl';\n * import 'dayjs/locale/it';\n * // or if you want to include all locales\n * import 'dayjs/min/locales';\n *\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  DateTimeParser: Dayjs\n * })\n * ```\n * If you would like to stick with english language for datetimes in Stream components, you can set `disableDateTimeTranslations` to true.\n *\n */\nconst defaultStreami18nOptions = {\n  DateTimeParser: Dayjs,\n  dayjsLocaleConfigForLanguage: null,\n  debug: false,\n  disableDateTimeTranslations: false,\n  language: 'en',\n  logger: message => console.warn(message)\n};\nexport class Streami18n {\n  /**\n   * Constructor accepts following options:\n   *  - language (String) default: 'en'\n   *    Language code e.g., en, tr\n   *\n   *  - translationsForLanguage (object)\n   *    Translations object. Please check src/i18n/en.json for example.\n   *\n   *  - disableDateTimeTranslations (boolean) default: false\n   *    Disable translations for date-times\n   *\n   *  - debug (boolean) default: false\n   *    Enable debug mode in internal i18n class\n   *\n   *  - logger (function) default: () => {}\n   *    Logger function to log warnings/errors from this class\n   *\n   *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'\n   *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,\n   *    corresponding to language (param)\n   *\n   *  - DateTimeParser (function) Moment or Dayjs instance/function.\n   *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n\n   *\n   * @param {*} options\n   */\n  constructor(options = {}) {\n    this.i18nInstance = i18n.createInstance();\n    this.Dayjs = null;\n    this.setLanguageCallback = () => null;\n    this.initialized = false;\n    this.t = defaultTranslatorFunction;\n    this.translations = {\n      de: {\n        [defaultNS]: deTranslations\n      },\n      en: {\n        [defaultNS]: enTranslations\n      },\n      es: {\n        [defaultNS]: esTranslations\n      },\n      fr: {\n        [defaultNS]: frTranslations\n      },\n      hi: {\n        [defaultNS]: hiTranslations\n      },\n      it: {\n        [defaultNS]: itTranslations\n      },\n      ja: {\n        [defaultNS]: jaTranslations\n      },\n      ko: {\n        [defaultNS]: koTranslations\n      },\n      nl: {\n        [defaultNS]: nlTranslations\n      },\n      pt: {\n        [defaultNS]: ptTranslations\n      },\n      ru: {\n        [defaultNS]: ruTranslations\n      },\n      tr: {\n        [defaultNS]: trTranslations\n      }\n    };\n    /**\n     * dayjs.defineLanguage('nl') also changes the global locale. We don't want to do that\n     * when user calls registerTranslation() function. So instead we will store the locale configs\n     * given to registerTranslation() function in `dayjsLocales` object, and register the required locale\n     * with moment, when setLanguage is called.\n     * */\n    this.dayjsLocales = {};\n    this.formatters = predefinedFormatters;\n    this.localeExists = language => {\n      if (this.isCustomDateTimeParser) return true;\n      return Object.keys(Dayjs.Ls).indexOf(language) > -1;\n    };\n    this.validateCurrentLanguage = () => {\n      const availableLanguages = Object.keys(this.translations);\n      if (availableLanguages.indexOf(this.currentLanguage) === -1) {\n        this.logger(`Streami18n: '${this.currentLanguage}' language is not registered.` + ` Please make sure to call streami18n.registerTranslation('${this.currentLanguage}', {...}) or ` + `use one the built-in supported languages - ${this.getAvailableLanguages()}`);\n        this.currentLanguage = defaultLng;\n      }\n    };\n    /** Returns an instance of i18next used within this class instance */\n    this.geti18Instance = () => this.i18nInstance;\n    /** Returns list of available languages. */\n    this.getAvailableLanguages = () => Object.keys(this.translations);\n    /** Returns all the translation dictionary for all inbuilt-languages */\n    this.getTranslations = () => this.translations;\n    const finalOptions = {\n      ...defaultStreami18nOptions,\n      ...options\n    };\n    // Prepare the i18next configuration.\n    this.logger = finalOptions.logger;\n    this.currentLanguage = finalOptions.language;\n    this.DateTimeParser = finalOptions.DateTimeParser;\n    this.timezone = finalOptions.timezone;\n    this.formatters = {\n      ...predefinedFormatters,\n      ...options?.formatters\n    };\n    try {\n      if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {\n        this.DateTimeParser.extend(LocalizedFormat);\n        this.DateTimeParser.extend(calendar);\n        this.DateTimeParser.extend(localeData);\n        this.DateTimeParser.extend(relativeTime);\n      }\n    } catch (error) {\n      throw Error(`Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ${error}`);\n    }\n    this.isCustomDateTimeParser = !!options.DateTimeParser;\n    const translationsForLanguage = finalOptions.translationsForLanguage;\n    if (translationsForLanguage) {\n      this.translations[this.currentLanguage] = {\n        [defaultNS]: this.translations[this.currentLanguage] && this.translations[this.currentLanguage][defaultNS] ? {\n          ...this.translations[this.currentLanguage][defaultNS],\n          ...translationsForLanguage\n        } : translationsForLanguage\n      };\n    }\n    // If translations don't exist for given language, then set it as empty object.\n    if (!this.translations[this.currentLanguage]) {\n      this.translations[this.currentLanguage] = {\n        [defaultNS]: {}\n      };\n    }\n    this.i18nextConfig = {\n      debug: finalOptions.debug,\n      fallbackLng: false,\n      interpolation: {\n        escapeValue: false,\n        formatSeparator: '|'\n      },\n      keySeparator: false,\n      lng: this.currentLanguage,\n      nsSeparator: false\n    };\n    if (finalOptions.parseMissingKeyHandler) {\n      this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;\n    }\n    this.validateCurrentLanguage();\n    const dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;\n    if (dayjsLocaleConfigForLanguage) {\n      this.addOrUpdateLocale(this.currentLanguage, {\n        ...dayjsLocaleConfigForLanguage\n      });\n    } else if (!this.localeExists(this.currentLanguage)) {\n      this.logger(`Streami18n: Streami18n(...) - Locale config for ${this.currentLanguage} does not exist in momentjs.` + `Please import the locale file using \"import 'moment/locale/${this.currentLanguage}';\" in your app or ` + `register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);\n    }\n    this.tDateTimeParser = timestamp => {\n      const language = finalOptions.disableDateTimeTranslations || !this.localeExists(this.currentLanguage) ? defaultLng : this.currentLanguage;\n      if (isDayJs(this.DateTimeParser)) {\n        return supportsTz(this.DateTimeParser) ? this.DateTimeParser(timestamp).tz(this.timezone).locale(language) : this.DateTimeParser(timestamp).locale(language);\n      }\n      if (supportsTz(this.DateTimeParser) && this.timezone) {\n        return this.DateTimeParser(timestamp).tz(this.timezone).locale(language);\n      }\n      return this.DateTimeParser(timestamp).locale(language);\n    };\n  }\n  /**\n   * Initializes the i18next instance with configuration (which enables natural language as default keys)\n   */\n  async init() {\n    this.validateCurrentLanguage();\n    try {\n      this.t = await this.i18nInstance.init({\n        ...this.i18nextConfig,\n        lng: this.currentLanguage,\n        resources: this.translations\n      });\n      this.initialized = true;\n      if (this.formatters) {\n        Object.entries(this.formatters).forEach(([name, formatterFactory]) => {\n          if (!formatterFactory) return;\n          this.i18nInstance.services.formatter?.add(name, formatterFactory(this));\n        });\n      }\n    } catch (error) {\n      this.logger(`Something went wrong with init: ${JSON.stringify(error)}`);\n    }\n    return {\n      t: this.t,\n      tDateTimeParser: this.tDateTimeParser\n    };\n  }\n  /**\n   * Returns current version translator function.\n   */\n  async getTranslators() {\n    if (!this.initialized) {\n      if (this.dayjsLocales[this.currentLanguage]) {\n        this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);\n      }\n      return await this.init();\n    } else {\n      return {\n        t: this.t,\n        tDateTimeParser: this.tDateTimeParser\n      };\n    }\n  }\n  registerTranslation(language, translation, customDayjsLocale) {\n    if (!translation) {\n      this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation`);\n      return;\n    }\n    if (!this.translations[language]) {\n      this.translations[language] = {\n        [defaultNS]: translation\n      };\n    } else {\n      this.translations[language][defaultNS] = translation;\n    }\n    if (customDayjsLocale) {\n      this.dayjsLocales[language] = {\n        ...customDayjsLocale\n      };\n    } else if (!this.localeExists(language)) {\n      this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) - ` + `Locale config for ${language} does not exist in Dayjs.` + `Please import the locale file using \"import 'dayjs/locale/${language}';\" in your app or ` + `register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);\n    }\n    if (this.initialized) {\n      this.i18nInstance.addResources(language, defaultNS, translation);\n    }\n  }\n  addOrUpdateLocale(key, config) {\n    if (this.localeExists(key)) {\n      Dayjs.updateLocale(key, {\n        ...config\n      });\n    } else {\n      // Merging the custom locale config with en config, so missing keys can default to english.\n      Dayjs.locale({\n        name: key,\n        ...en_locale,\n        ...config\n      }, undefined, true);\n    }\n  }\n  async setLanguage(language) {\n    this.currentLanguage = language;\n    if (!this.initialized) return;\n    try {\n      const t = await this.i18nInstance.changeLanguage(language);\n      if (this.dayjsLocales[language]) {\n        this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);\n      }\n      this.setLanguageCallback(t);\n      return t;\n    } catch (error) {\n      this.logger(`Failed to set language: ${JSON.stringify(error)}`);\n      return this.t;\n    }\n  }\n  registerSetLanguageCallback(callback) {\n    this.setLanguageCallback = callback;\n  }\n}","map":{"version":3,"names":["i18n","Dayjs","calendar","updateLocale","LocalizedFormat","localeData","relativeTime","utc","timezone","defaultTranslatorFunction","predefinedFormatters","deTranslations","enTranslations","esTranslations","frTranslations","hiTranslations","itTranslations","jaTranslations","koTranslations","nlTranslations","ptTranslations","ruTranslations","trTranslations","defaultNS","defaultLng","extend","lastDay","lastWeek","nextDay","nextWeek","sameDay","sameElse","meridiem","hour","meridiemHour","meridiemParse","en_locale","formats","months","weekdays","isDayJs","dateTimeParser","undefined","supportsTz","tz","defaultStreami18nOptions","DateTimeParser","dayjsLocaleConfigForLanguage","debug","disableDateTimeTranslations","language","logger","message","console","warn","Streami18n","constructor","options","i18nInstance","createInstance","setLanguageCallback","initialized","t","translations","de","en","es","fr","hi","it","ja","ko","nl","pt","ru","tr","dayjsLocales","formatters","localeExists","isCustomDateTimeParser","Object","keys","Ls","indexOf","validateCurrentLanguage","availableLanguages","currentLanguage","getAvailableLanguages","geti18Instance","getTranslations","finalOptions","error","Error","translationsForLanguage","i18nextConfig","fallbackLng","interpolation","escapeValue","formatSeparator","keySeparator","lng","nsSeparator","parseMissingKeyHandler","addOrUpdateLocale","tDateTimeParser","timestamp","locale","init","resources","entries","forEach","name","formatterFactory","services","formatter","add","JSON","stringify","getTranslators","registerTranslation","translation","customDayjsLocale","addResources","key","config","setLanguage","changeLanguage","registerSetLanguageCallback","callback"],"sources":["C:/Users/benny/Documents/GitHub/TicTacToeOnline/client/ttt_client/node_modules/stream-chat-react/dist/i18n/Streami18n.js"],"sourcesContent":["import i18n from 'i18next';\nimport Dayjs from 'dayjs';\nimport calendar from 'dayjs/plugin/calendar';\nimport updateLocale from 'dayjs/plugin/updateLocale';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat';\nimport localeData from 'dayjs/plugin/localeData';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\nimport { defaultTranslatorFunction, predefinedFormatters } from './utils';\nimport { deTranslations, enTranslations, esTranslations, frTranslations, hiTranslations, itTranslations, jaTranslations, koTranslations, nlTranslations, ptTranslations, ruTranslations, trTranslations, } from './translations';\nimport 'dayjs/locale/de';\nimport 'dayjs/locale/es';\nimport 'dayjs/locale/fr';\nimport 'dayjs/locale/hi';\nimport 'dayjs/locale/it';\nimport 'dayjs/locale/ja';\nimport 'dayjs/locale/ko';\nimport 'dayjs/locale/nl';\nimport 'dayjs/locale/pt';\nimport 'dayjs/locale/ru';\nimport 'dayjs/locale/tr';\n// These locale imports also set these locale globally.\n// So As a last step I am going to import english locale\n// to make sure I don't mess up language at other places in app.\nimport 'dayjs/locale/en';\nconst defaultNS = 'translation';\nconst defaultLng = 'en';\nDayjs.extend(updateLocale);\nDayjs.extend(utc);\nDayjs.extend(timezone);\nDayjs.updateLocale('de', {\n    calendar: {\n        lastDay: '[gestern um] LT',\n        lastWeek: '[letzten] dddd [um] LT',\n        nextDay: '[morgen um] LT',\n        nextWeek: 'dddd [um] LT',\n        sameDay: '[heute um] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('es', {\n    calendar: {\n        lastDay: '[ayer a las] LT',\n        lastWeek: '[pasado] dddd [a] LT',\n        nextDay: '[mañana a] LT',\n        nextWeek: 'dddd [a] LT',\n        sameDay: '[hoy a las] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('fr', {\n    calendar: {\n        lastDay: '[Hier à] LT',\n        lastWeek: 'dddd [dernier à] LT',\n        nextDay: '[Demain à] LT',\n        nextWeek: 'dddd [à] LT',\n        sameDay: '[Aujourd’hui à] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('hi', {\n    calendar: {\n        lastDay: '[कल] LT',\n        lastWeek: '[पिछले] dddd, LT',\n        nextDay: '[कल] LT',\n        nextWeek: 'dddd, LT',\n        sameDay: '[आज] LT',\n        sameElse: 'L',\n    },\n    // Hindi notation for meridiems are quite fuzzy in practice. While there exists\n    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.\n    meridiem(hour) {\n        if (hour < 4) {\n            return 'रात';\n        }\n        else if (hour < 10) {\n            return 'सुबह';\n        }\n        else if (hour < 17) {\n            return 'दोपहर';\n        }\n        else if (hour < 20) {\n            return 'शाम';\n        }\n        else {\n            return 'रात';\n        }\n    },\n    meridiemHour(hour, meridiem) {\n        if (hour === 12) {\n            hour = 0;\n        }\n        if (meridiem === 'रात') {\n            return hour < 4 ? hour : hour + 12;\n        }\n        else if (meridiem === 'सुबह') {\n            return hour;\n        }\n        else if (meridiem === 'दोपहर') {\n            return hour >= 10 ? hour : hour + 12;\n        }\n        else if (meridiem === 'शाम') {\n            return hour + 12;\n        }\n        return hour;\n    },\n    meridiemParse: /रात|सुबह|दोपहर|शाम/,\n});\nDayjs.updateLocale('it', {\n    calendar: {\n        lastDay: '[Ieri alle] LT',\n        lastWeek: '[lo scorso] dddd [alle] LT',\n        nextDay: '[Domani alle] LT',\n        nextWeek: 'dddd [alle] LT',\n        sameDay: '[Oggi alle] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('ja', {\n    calendar: {\n        lastDay: '[昨日] LT',\n        lastWeek: 'dddd LT',\n        nextDay: '[明日] LT',\n        nextWeek: '[次の] dddd LT',\n        sameDay: '[今日] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('ko', {\n    calendar: {\n        lastDay: '[어제] LT',\n        lastWeek: '[지난] dddd LT',\n        nextDay: '[내일] LT',\n        nextWeek: 'dddd LT',\n        sameDay: '[오늘] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('nl', {\n    calendar: {\n        lastDay: '[gisteren om] LT',\n        lastWeek: '[afgelopen] dddd [om] LT',\n        nextDay: '[morgen om] LT',\n        nextWeek: 'dddd [om] LT',\n        sameDay: '[vandaag om] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('pt', {\n    calendar: {\n        lastDay: '[ontem às] LT',\n        lastWeek: 'dddd [passada às] LT',\n        nextDay: '[amanhã às] LT',\n        nextWeek: 'dddd [às] LT',\n        sameDay: '[hoje às] LT',\n        sameElse: 'L',\n    },\n});\nDayjs.updateLocale('ru', {\n    calendar: {\n        lastDay: '[Вчера, в] LT',\n        nextDay: '[Завтра, в] LT',\n        sameDay: '[Сегодня, в] LT',\n    },\n});\nDayjs.updateLocale('tr', {\n    calendar: {\n        lastDay: '[dün] LT',\n        lastWeek: '[geçen] dddd [saat] LT',\n        nextDay: '[yarın saat] LT',\n        nextWeek: '[gelecek] dddd [saat] LT',\n        sameDay: '[bugün saat] LT',\n        sameElse: 'L',\n    },\n});\nconst en_locale = {\n    formats: {},\n    months: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n    relativeTime: {},\n    weekdays: [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n    ],\n};\n// Type guards to check DayJs\nconst isDayJs = (dateTimeParser) => dateTimeParser.extend !== undefined;\nconst supportsTz = (dateTimeParser) => dateTimeParser.tz !== undefined;\n/**\n * Wrapper around [i18next](https://www.i18next.com/) class for Stream related translations.\n * Instance of this class should be provided to Chat component to handle translations.\n * Stream provides following list of in-built translations:\n * 1. English (en)\n * 2. Dutch (nl)\n * 3. Russian (ru)\n * 4. Turkish (tr)\n * 5. French (fr)\n * 6. Italian (it)\n * 7. Hindi (hi)\n * 8. Spanish (es)\n * 9. Portuguese (pt)\n * 10. German (de)\n * 11. Japanese (ja)\n * 12. Korean (ko)\n *\n * Simplest way to start using chat components in one of the in-built languages would be following:\n *\n * ```\n * const i18n = new Streami18n({ language 'nl' });\n * <Chat client={chatClient} i18nInstance={i18n}>\n *  ...\n * </Chat>\n * ```\n *\n * If you would like to override certain keys in in-built translation.\n * UI will be automatically updated in this case.\n *\n * ```\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  translationsForLanguage: {\n *    'Nothing yet...': 'Nog Niet ...',\n *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n *  }\n * });\n *\n * If you would like to register additional languages, use registerTranslation. You can add as many languages as you want:\n *\n * i18n.registerTranslation('zh', {\n *  'Nothing yet...': 'Nog Niet ...',\n *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n * });\n *\n * <Chat client={chatClient} i18nInstance={i18n}>\n *  ...\n * </Chat>\n * ```\n *\n * You can use the same function to add whole new language as well.\n *\n * ```\n * const i18n = new Streami18n();\n *\n * i18n.registerTranslation('mr', {\n *  'Nothing yet...': 'काहीही नाही  ...',\n *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n * });\n *\n * // Make sure to call setLanguage to reflect new language in UI.\n * i18n.setLanguage('it');\n * <Chat client={chatClient} i18nInstance={i18n}>\n *  ...\n * </Chat>\n * ```\n *\n * ## Datetime translations\n *\n * Stream react chat components uses [dayjs](https://day.js.org/en/) internally by default to format datetime stamp.\n * e.g., in ChannelPreview, MessageContent components.\n * Dayjs has locale support as well - https://day.js.org/docs/en/i18n/i18n\n * Dayjs is a lightweight alternative to Momentjs with the same modern API.\n *\n * Dayjs provides locale config for plenty of languages, you can check the whole list of locale configs at following url\n * https://github.com/iamkun/dayjs/tree/dev/src/locale\n *\n * You can either provide the dayjs locale config while registering\n * language with Streami18n (either via constructor or registerTranslation()) or you can provide your own Dayjs or Moment instance\n * to Streami18n constructor, which will be then used internally (using the language locale) in components.\n *\n * 1. Via language registration\n *\n * e.g.,\n * ```\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  dayjsLocaleConfigForLanguage: {\n *    months: [...],\n *    monthsShort: [...],\n *    calendar: {\n *      sameDay: ...'\n *    }\n *  }\n * });\n * ```\n *\n * Similarly, you can add locale config for moment while registering translation via `registerTranslation` function.\n *\n * e.g.,\n * ```\n * const i18n = new Streami18n();\n *\n * i18n.registerTranslation(\n *  'mr',\n *  {\n *    'Nothing yet...': 'काहीही नाही  ...',\n *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n *  },\n *  {\n *    months: [...],\n *    monthsShort: [...],\n *    calendar: {\n *      sameDay: ...'\n *    }\n *  }\n * );\n *```\n * 2. Provide your own Moment object\n *\n * ```js\n * import 'moment/locale/nl';\n * import 'moment/locale/it';\n * // or if you want to include all locales\n * import 'moment/min/locales';\n *\n * import Moment from moment\n *\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  DateTimeParser: Moment\n * })\n * ```\n *\n * 3. Provide your own Dayjs object\n *\n * ```js\n * import Dayjs from 'dayjs'\n *\n * import 'dayjs/locale/nl';\n * import 'dayjs/locale/it';\n * // or if you want to include all locales\n * import 'dayjs/min/locales';\n *\n * const i18n = new Streami18n({\n *  language: 'nl',\n *  DateTimeParser: Dayjs\n * })\n * ```\n * If you would like to stick with english language for datetimes in Stream components, you can set `disableDateTimeTranslations` to true.\n *\n */\nconst defaultStreami18nOptions = {\n    DateTimeParser: Dayjs,\n    dayjsLocaleConfigForLanguage: null,\n    debug: false,\n    disableDateTimeTranslations: false,\n    language: 'en',\n    logger: (message) => console.warn(message),\n};\nexport class Streami18n {\n    /**\n     * Constructor accepts following options:\n     *  - language (String) default: 'en'\n     *    Language code e.g., en, tr\n     *\n     *  - translationsForLanguage (object)\n     *    Translations object. Please check src/i18n/en.json for example.\n     *\n     *  - disableDateTimeTranslations (boolean) default: false\n     *    Disable translations for date-times\n     *\n     *  - debug (boolean) default: false\n     *    Enable debug mode in internal i18n class\n     *\n     *  - logger (function) default: () => {}\n     *    Logger function to log warnings/errors from this class\n     *\n     *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'\n     *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,\n     *    corresponding to language (param)\n     *\n     *  - DateTimeParser (function) Moment or Dayjs instance/function.\n     *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n\n     *\n     * @param {*} options\n     */\n    constructor(options = {}) {\n        this.i18nInstance = i18n.createInstance();\n        this.Dayjs = null;\n        this.setLanguageCallback = () => null;\n        this.initialized = false;\n        this.t = defaultTranslatorFunction;\n        this.translations = {\n            de: { [defaultNS]: deTranslations },\n            en: { [defaultNS]: enTranslations },\n            es: { [defaultNS]: esTranslations },\n            fr: { [defaultNS]: frTranslations },\n            hi: { [defaultNS]: hiTranslations },\n            it: { [defaultNS]: itTranslations },\n            ja: { [defaultNS]: jaTranslations },\n            ko: { [defaultNS]: koTranslations },\n            nl: { [defaultNS]: nlTranslations },\n            pt: { [defaultNS]: ptTranslations },\n            ru: { [defaultNS]: ruTranslations },\n            tr: { [defaultNS]: trTranslations },\n        };\n        /**\n         * dayjs.defineLanguage('nl') also changes the global locale. We don't want to do that\n         * when user calls registerTranslation() function. So instead we will store the locale configs\n         * given to registerTranslation() function in `dayjsLocales` object, and register the required locale\n         * with moment, when setLanguage is called.\n         * */\n        this.dayjsLocales = {};\n        this.formatters = predefinedFormatters;\n        this.localeExists = (language) => {\n            if (this.isCustomDateTimeParser)\n                return true;\n            return Object.keys(Dayjs.Ls).indexOf(language) > -1;\n        };\n        this.validateCurrentLanguage = () => {\n            const availableLanguages = Object.keys(this.translations);\n            if (availableLanguages.indexOf(this.currentLanguage) === -1) {\n                this.logger(`Streami18n: '${this.currentLanguage}' language is not registered.` +\n                    ` Please make sure to call streami18n.registerTranslation('${this.currentLanguage}', {...}) or ` +\n                    `use one the built-in supported languages - ${this.getAvailableLanguages()}`);\n                this.currentLanguage = defaultLng;\n            }\n        };\n        /** Returns an instance of i18next used within this class instance */\n        this.geti18Instance = () => this.i18nInstance;\n        /** Returns list of available languages. */\n        this.getAvailableLanguages = () => Object.keys(this.translations);\n        /** Returns all the translation dictionary for all inbuilt-languages */\n        this.getTranslations = () => this.translations;\n        const finalOptions = {\n            ...defaultStreami18nOptions,\n            ...options,\n        };\n        // Prepare the i18next configuration.\n        this.logger = finalOptions.logger;\n        this.currentLanguage = finalOptions.language;\n        this.DateTimeParser = finalOptions.DateTimeParser;\n        this.timezone = finalOptions.timezone;\n        this.formatters = { ...predefinedFormatters, ...options?.formatters };\n        try {\n            if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {\n                this.DateTimeParser.extend(LocalizedFormat);\n                this.DateTimeParser.extend(calendar);\n                this.DateTimeParser.extend(localeData);\n                this.DateTimeParser.extend(relativeTime);\n            }\n        }\n        catch (error) {\n            throw Error(`Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ${error}`);\n        }\n        this.isCustomDateTimeParser = !!options.DateTimeParser;\n        const translationsForLanguage = finalOptions.translationsForLanguage;\n        if (translationsForLanguage) {\n            this.translations[this.currentLanguage] = {\n                [defaultNS]: this.translations[this.currentLanguage] &&\n                    this.translations[this.currentLanguage][defaultNS]\n                    ? {\n                        ...this.translations[this.currentLanguage][defaultNS],\n                        ...translationsForLanguage,\n                    }\n                    : translationsForLanguage,\n            };\n        }\n        // If translations don't exist for given language, then set it as empty object.\n        if (!this.translations[this.currentLanguage]) {\n            this.translations[this.currentLanguage] = {\n                [defaultNS]: {},\n            };\n        }\n        this.i18nextConfig = {\n            debug: finalOptions.debug,\n            fallbackLng: false,\n            interpolation: { escapeValue: false, formatSeparator: '|' },\n            keySeparator: false,\n            lng: this.currentLanguage,\n            nsSeparator: false,\n        };\n        if (finalOptions.parseMissingKeyHandler) {\n            this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;\n        }\n        this.validateCurrentLanguage();\n        const dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;\n        if (dayjsLocaleConfigForLanguage) {\n            this.addOrUpdateLocale(this.currentLanguage, {\n                ...dayjsLocaleConfigForLanguage,\n            });\n        }\n        else if (!this.localeExists(this.currentLanguage)) {\n            this.logger(`Streami18n: Streami18n(...) - Locale config for ${this.currentLanguage} does not exist in momentjs.` +\n                `Please import the locale file using \"import 'moment/locale/${this.currentLanguage}';\" in your app or ` +\n                `register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);\n        }\n        this.tDateTimeParser = (timestamp) => {\n            const language = finalOptions.disableDateTimeTranslations ||\n                !this.localeExists(this.currentLanguage)\n                ? defaultLng\n                : this.currentLanguage;\n            if (isDayJs(this.DateTimeParser)) {\n                return supportsTz(this.DateTimeParser)\n                    ? this.DateTimeParser(timestamp).tz(this.timezone).locale(language)\n                    : this.DateTimeParser(timestamp).locale(language);\n            }\n            if (supportsTz(this.DateTimeParser) && this.timezone) {\n                return this.DateTimeParser(timestamp).tz(this.timezone).locale(language);\n            }\n            return this.DateTimeParser(timestamp).locale(language);\n        };\n    }\n    /**\n     * Initializes the i18next instance with configuration (which enables natural language as default keys)\n     */\n    async init() {\n        this.validateCurrentLanguage();\n        try {\n            this.t = await this.i18nInstance.init({\n                ...this.i18nextConfig,\n                lng: this.currentLanguage,\n                resources: this.translations,\n            });\n            this.initialized = true;\n            if (this.formatters) {\n                Object.entries(this.formatters).forEach(([name, formatterFactory]) => {\n                    if (!formatterFactory)\n                        return;\n                    this.i18nInstance.services.formatter?.add(name, formatterFactory(this));\n                });\n            }\n        }\n        catch (error) {\n            this.logger(`Something went wrong with init: ${JSON.stringify(error)}`);\n        }\n        return {\n            t: this.t,\n            tDateTimeParser: this.tDateTimeParser,\n        };\n    }\n    /**\n     * Returns current version translator function.\n     */\n    async getTranslators() {\n        if (!this.initialized) {\n            if (this.dayjsLocales[this.currentLanguage]) {\n                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);\n            }\n            return await this.init();\n        }\n        else {\n            return {\n                t: this.t,\n                tDateTimeParser: this.tDateTimeParser,\n            };\n        }\n    }\n    registerTranslation(language, translation, customDayjsLocale) {\n        if (!translation) {\n            this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation`);\n            return;\n        }\n        if (!this.translations[language]) {\n            this.translations[language] = { [defaultNS]: translation };\n        }\n        else {\n            this.translations[language][defaultNS] = translation;\n        }\n        if (customDayjsLocale) {\n            this.dayjsLocales[language] = { ...customDayjsLocale };\n        }\n        else if (!this.localeExists(language)) {\n            this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) - ` +\n                `Locale config for ${language} does not exist in Dayjs.` +\n                `Please import the locale file using \"import 'dayjs/locale/${language}';\" in your app or ` +\n                `register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);\n        }\n        if (this.initialized) {\n            this.i18nInstance.addResources(language, defaultNS, translation);\n        }\n    }\n    addOrUpdateLocale(key, config) {\n        if (this.localeExists(key)) {\n            Dayjs.updateLocale(key, { ...config });\n        }\n        else {\n            // Merging the custom locale config with en config, so missing keys can default to english.\n            Dayjs.locale({ name: key, ...en_locale, ...config }, undefined, true);\n        }\n    }\n    async setLanguage(language) {\n        this.currentLanguage = language;\n        if (!this.initialized)\n            return;\n        try {\n            const t = await this.i18nInstance.changeLanguage(language);\n            if (this.dayjsLocales[language]) {\n                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);\n            }\n            this.setLanguageCallback(t);\n            return t;\n        }\n        catch (error) {\n            this.logger(`Failed to set language: ${JSON.stringify(error)}`);\n            return this.t;\n        }\n    }\n    registerSetLanguageCallback(callback) {\n        this.setLanguageCallback = callback;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}